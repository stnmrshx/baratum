// Code generated by go-bindata.
// sources:
// data/customers.json
// data/locations.json
// data/profiles.json
// data/rates.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCustomersJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8a\xe6\x52\x00\x82\x6a\x30\x09\x02\x4a\x99\x29\x4a\x56\x0a\x86\x3a\x08\x81\xc4\xd2\x92\x8c\x90\xfc\xec\xd4\x3c\xa0\xb8\x52\xb0\x6b\x70\xa8\x9f\xbb\x7b\xa8\x87\x5f\xa4\x63\xbc\xa3\x77\x68\xbc\xbb\xa3\x5f\x88\xab\x9f\xbb\x12\x58\x7d\x2d\x57\x2c\x17\x20\x00\x00\xff\xff\xad\xd7\x11\x68\x51\x00\x00\x00")

func dataCustomersJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataCustomersJson,
		"data/customers.json",
	)
}

func dataCustomersJson() (*asset, error) {
	bytes, err := dataCustomersJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/customers.json", size: 81, mode: os.FileMode(436), modTime: time.Unix(1476803561, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLocationsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\xd0\x3d\xae\xc2\x30\x0c\xc0\xf1\xbd\xa7\xa8\x32\xf7\x55\xf1\xb7\xf3\x6e\xc0\x19\x10\x03\x12\x48\x0c\x15\x5d\xba\x21\xee\x4e\x28\x03\x0c\x2e\xc1\x43\x06\xff\xa5\x5f\xa2\xec\xbb\xbe\xce\x6d\x3d\x9f\x93\x2e\xf3\x72\x9e\x76\xa7\xf4\xdf\x27\x48\xc3\x7b\x3f\x1d\x97\xba\xfb\xb3\xd1\x4a\x76\x70\xf9\x4c\xf3\xb5\x26\x80\x3c\x92\xaa\x20\xc2\x9a\xee\xc3\x17\x1a\x63\xda\x38\x0b\xe1\x06\xed\x99\xc9\xda\x34\xc5\xb4\x60\xf1\x18\x16\x57\x26\x6a\xc3\x1c\xc3\x54\xd0\x00\x62\xba\xde\x8a\xa5\x2d\x4b\x2c\x7b\x46\x31\x8d\x65\x97\xc2\xf6\xc3\xa3\x75\x83\x66\x60\xd8\xf8\x0f\xe5\x9a\xf5\x45\x77\x87\xee\x11\x00\x00\xff\xff\xca\xe5\x9c\x78\x22\x02\x00\x00")

func dataLocationsJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataLocationsJson,
		"data/locations.json",
	)
}

func dataLocationsJson() (*asset, error) {
	bytes, err := dataLocationsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/locations.json", size: 546, mode: os.FileMode(436), modTime: time.Unix(1476803561, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProfilesJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x97\x4b\x6f\x1b\x37\x10\xc7\xef\xfe\x14\x03\x1d\x8a\x16\x10\x0c\xbd\x25\xf7\xe6\xb8\x41\x1c\xa7\x49\x8d\xda\x97\xa0\xe8\x61\xa4\x9d\xee\x72\xb9\x4b\x2e\xf8\x68\x21\x14\xf9\xee\xfd\x73\x25\x57\x6a\xad\x97\x7d\x28\x54\x44\xb0\x65\x89\x9c\x07\x39\xf3\xf3\x9f\xdc\x5f\x2e\x08\xaf\x3f\xdb\xf7\xf4\xea\xa8\xac\xf3\x3d\x75\xfa\x9d\xee\x66\xc8\x70\x2d\x69\xf0\xbd\x31\x4c\xef\xd8\xc5\x8c\xe9\x23\x57\xca\xce\xad\xb3\xdb\x86\x4d\x61\x8d\x7c\x8a\xf5\x5c\x5c\xb2\xff\xb6\x37\x98\x8e\xbe\xa3\xc1\x60\x34\x1e\x4e\xb6\xed\x32\xf1\x0b\xa7\x9a\xa0\xac\x49\x76\x3f\x5a\xcd\x5e\xd1\xad\x0d\x52\x91\x67\x93\x73\x20\x1f\x1c\x07\xc9\x95\xa7\x4c\x51\xc9\x15\x9b\x4d\x4a\xca\x44\xc3\x24\x13\x58\x1a\x7a\x08\x70\x8e\x86\x1e\x63\x1e\xbb\xed\x3b\x65\x18\xbe\x67\xcf\x8e\xde\x88\x53\x26\x57\x86\x6e\xd9\x95\xf6\x92\x3e\x45\x36\x9e\x49\x57\xf0\xd1\xb4\x44\x2e\xd2\x62\x02\x57\x5d\xaa\xec\x7c\xb9\x1a\xa9\x22\x7b\xf2\xe2\x02\x23\x79\x85\x2c\x9a\x1b\xf5\x94\xae\x61\xa7\x95\xc3\x87\x8d\x69\x13\x2b\xee\xc2\xa1\x40\xaa\x9c\xc9\x2c\xb9\xc6\x7c\x34\x21\x6a\xaa\xd4\x3c\x26\x6b\x94\xc4\x63\x18\xd9\xe0\xe2\x60\x15\xc4\x2d\x14\x32\x5f\x6e\x17\x86\xb3\xcc\x89\xf7\x28\xca\xa6\x23\xed\x04\xca\x21\x12\x36\xa5\x9d\xf4\xb6\xdc\xb6\x2d\xd6\xad\xba\xab\x2e\x77\xb6\xa8\x35\x5d\xa8\xb0\x4c\x46\x9f\x6d\xbe\x64\xcd\xd8\xe7\xf3\x60\x28\x7e\x32\xf9\xe1\xfd\xe7\x67\xde\x16\x3b\x73\xcb\x15\x10\x19\x1a\xee\xd5\x33\xff\xc6\x22\x42\x75\x63\xb3\x36\xc8\x78\xdc\xbf\x9a\x75\xfe\xb6\xf8\xd2\x7e\xfa\xd2\xdd\x4d\xde\x60\x17\x79\x2b\x34\x1e\xd1\x29\x27\x35\xed\x5c\xf7\x1e\xf8\x46\xa3\xfe\x60\x30\xbb\x3a\x40\xdf\x9d\xd2\x4c\xd7\x06\x4c\xd7\x52\xab\x4a\x69\x45\x9c\x4b\xfa\xae\xc1\x1f\x87\xa7\x56\x63\x76\x1e\x43\x2c\x34\x06\x5c\xe4\x16\x86\xb9\x00\xb2\x2e\xd5\x58\x0d\xed\x5b\x23\x71\x06\x7c\x0b\x6a\x10\xbb\x78\x0a\x16\xa4\xe1\x70\xb9\xf6\x51\x46\x6d\x72\xb7\xa1\xa9\x01\x7d\x52\xc7\x7f\x60\x96\xa8\x7e\xce\x23\xb6\x3b\xe7\x9c\x15\xfd\x06\xa4\x2b\x15\x12\x8f\x62\xa2\x29\xe1\xf7\x3a\xb6\xa6\x83\xeb\xe3\x70\x5d\x7f\xa4\x87\x54\x83\x52\x9d\x01\x5d\xd3\xc1\xa9\x74\x0d\x77\xd1\xf5\xc0\x85\xca\xe8\x67\xb5\x28\xe8\xce\xe6\xe5\xba\x95\xc7\xd9\x1a\x8f\x86\xb3\xf1\x78\x7c\x80\xad\xdd\x91\xd1\x6c\x17\x1b\x4e\x20\x15\xed\x77\x27\xda\xd6\x09\x39\xa8\xe0\x4a\x36\x12\x8f\x49\x52\xac\x4b\xed\x9f\xf3\x42\x37\xf8\x15\xb7\xa6\x87\x35\x01\xa5\x65\x42\xd6\xe4\x31\x70\xdd\x06\x9b\xc7\x52\x42\x17\xb3\xa0\xa3\x8c\x79\x02\x78\xa5\x45\x98\xf3\x0c\xc5\xc4\xf2\x95\x0f\x50\xaf\x22\x29\xac\x20\x35\xb8\x44\x08\xa9\x9b\x08\x40\x25\xc4\x24\xb4\x89\x2a\x88\x19\x3b\x95\xe4\x0e\x2c\x15\xaf\xe3\xa8\x3f\x3b\x45\xa3\x72\x49\x29\xe9\x43\x4d\x93\x33\x20\xa9\x3f\x3e\x95\xa4\xd1\x2e\x92\x1e\x0b\xa1\x6b\xec\x87\xb7\xff\xff\x57\x3d\xff\x86\x6e\xac\xf9\x1d\xea\x00\x34\xe8\x06\x7f\x51\xa4\xe3\x47\xe7\x74\x36\x9c\xf6\x7a\xff\x81\x7a\xbd\x6c\xe5\xff\x3f\x4d\x3b\x8e\xe2\x3d\x76\x94\x92\x27\x05\x67\xc7\x74\x0f\x30\x4b\x76\x67\x00\x65\xef\x64\x28\xc7\xfb\xa0\x7c\x9b\x49\xf5\x87\x28\xef\xd7\xed\x79\xc9\x11\x3a\x9d\x4e\xfa\xc3\xd9\x21\x08\x0f\x67\xf8\x5a\xe4\x6e\x7a\x73\x1c\xb2\x77\x52\x32\xf6\x74\x0e\x50\x5d\x75\x2e\x4e\xa4\x6a\xb2\x8f\xaa\xfe\x4f\xfd\xed\x3e\xb7\x77\xef\x13\xcf\xce\xc1\x6c\x34\xea\x1d\x54\xb6\x37\x9c\xab\x95\xb2\xad\x05\x2c\xdd\xe3\xf1\x93\x5a\xaf\xd1\xb9\xb5\x2c\x54\xa9\x9e\x18\xb2\x5a\x9e\xe4\xa3\x68\x2f\xd8\xad\x97\x03\x0f\x45\x7a\x84\x80\x57\xb0\x26\xc7\x03\xc2\xed\xdb\xfd\xeb\x3e\xa4\x6b\x1f\xd8\x89\x49\x08\x7a\x28\x5a\x8d\x4b\x7d\xd1\x25\x06\xc8\xb6\xe5\x78\xa5\x77\x66\x29\x99\x6a\xe1\xdc\x28\x17\x54\x10\x51\x55\x2b\x75\x9b\xe5\xae\x23\x03\xde\xf4\x24\x50\x42\x79\x10\x33\x44\x00\xfc\x4a\xfa\x7a\xc3\x53\x4e\x5b\x97\xdb\x18\xb0\xe6\x33\x00\x10\x97\xf2\x7f\xf3\x77\xf1\xeb\xc5\x5f\x01\x00\x00\xff\xff\x79\x69\x3b\x3d\x90\x0e\x00\x00")

func dataProfilesJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataProfilesJson,
		"data/profiles.json",
	)
}

func dataProfilesJson() (*asset, error) {
	bytes, err := dataProfilesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/profiles.json", size: 3728, mode: os.FileMode(436), modTime: time.Unix(1476803561, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataRatesJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\xd4\x4d\x6b\xb3\x40\x10\x07\xf0\x7b\x3e\x85\x78\x4e\x60\xdf\x8d\xcf\x4d\x70\x21\x42\x1e\x0f\x2a\xf4\x50\x7a\x30\x2a\x54\x6a\xdd\x60\x36\x85\x52\xfa\xdd\xab\x96\x46\x25\x43\x17\x05\xe9\x1e\x3c\xcc\x4c\xf2\x97\x1f\x3b\x3e\x6e\xac\xf6\x7c\xf4\xcf\xee\xd8\xcf\x4a\x17\x55\x90\xdb\xff\x2c\x1b\xdb\xdb\xa1\x9e\xa9\xbc\xe8\x8a\x41\x18\x7a\xe3\x7a\x59\xfb\xa9\xee\x3b\x04\x61\xb1\xc3\x68\x47\xd0\xb8\xaf\xae\xfa\x6e\x60\xf2\xc7\x8d\x52\xaf\xc9\xfb\xb9\x9b\x18\x5e\xa3\xad\x9f\x94\x7a\x49\x4f\x55\x11\x7d\xff\x1a\x73\x97\x3a\x1c\x6d\xc7\x23\x3f\xef\x14\x27\xbe\x3d\x69\xe4\xc5\x25\x6b\xca\xb3\x2e\x55\xdd\xf7\x75\x5a\xe7\x69\x93\x5b\x51\x9b\x35\x9d\xd4\x4a\xa7\xd5\x2f\x11\xb7\x7e\x50\x67\xd5\xf5\x52\xbe\xf5\x83\x02\x75\xe7\x36\xf7\xb9\x19\x9e\x30\x25\x81\x28\x13\x19\x26\x91\xfc\xff\x27\x9a\x0e\x67\x1c\xad\xab\x09\x44\xc0\x9a\xfb\xb9\x9a\x14\xd2\x8c\xbd\x43\xe0\x1b\x2c\xb1\xc9\x92\x2c\xb0\x74\x88\x8b\xd6\xa5\x04\x12\x40\xc9\xf6\xf2\xce\x83\x64\x10\xa4\x77\xf4\x8c\x2b\x4e\x4c\x90\x74\x01\xa4\xe8\x2f\xc2\x9a\x90\x40\x02\x0c\x39\xf7\x46\x72\x08\x52\xfa\xf2\xf8\x20\x83\x38\x36\x60\x52\x13\x26\x5b\x80\x49\xf9\x7e\x65\x4c\x20\x01\xc4\xa4\x62\x26\xa6\x00\x3f\x96\x07\x89\x11\x36\x48\x32\x93\x24\x5f\xb2\xdf\x0c\x31\xe1\xae\xba\xdf\xf7\x09\x73\xf6\xfb\xe9\x2b\x00\x00\xff\xff\x6f\x25\xbb\xfa\xc5\x07\x00\x00")

func dataRatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataRatesJson,
		"data/rates.json",
	)
}

func dataRatesJson() (*asset, error) {
	bytes, err := dataRatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/rates.json", size: 1989, mode: os.FileMode(436), modTime: time.Unix(1476806524, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/customers.json": dataCustomersJson,
	"data/locations.json": dataLocationsJson,
	"data/profiles.json": dataProfilesJson,
	"data/rates.json": dataRatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"customers.json": &bintree{dataCustomersJson, map[string]*bintree{}},
		"locations.json": &bintree{dataLocationsJson, map[string]*bintree{}},
		"profiles.json": &bintree{dataProfilesJson, map[string]*bintree{}},
		"rates.json": &bintree{dataRatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

